import re

def copy_and_replace_inner_text(source_file, destination_file):
    # Step 1: Extract inner content from <p> tags that have either a class or id attribute in the source file
    with open(source_file, 'r') as src:
        source_content = src.read()

    # Debugging: Print the entire source content to check the formatting and verify it's being read correctly
    print("Full Source File Content:\n", source_content)

    # Improved regex to match <p> tags with either class or id attributes (more flexible with spacing)
    # This regex should now handle cases with extra spaces, line breaks, or irregular formatting
    pattern_source = re.compile(r'(<p\s+[^>]*(?:class="[^"]*"|id="[^"]*")[^>]*>)(.*?)</p>', re.DOTALL)

    # Find all matches (p tags with class or id) in the source file
    source_matches = pattern_source.findall(source_content)

    # Debugging: Check if the regex found anything
    if not source_matches:
        print("No matching paragraphs with class or id found in the source file.")
        return

    # Debugging: Print the matched <p> tags and their content
    for i, match in enumerate(source_matches):
        print(f"Matched <p> tag {i + 1}: {match[0]}")
        print(f"Inner content {i + 1}: {match[1]}")

    # Step 2: Read the destination file line by line
    with open(destination_file, 'r') as dest:
        destination_content = dest.readlines()

    # Debugging: Print the destination content before making changes
    print("Destination Content Before:\n", ''.join(destination_content))

    # Regex to find <p> tags with class="subsq transformed-text hidden" and other attributes
    pattern_destination = re.compile(r'(<p\s+class="subsq transformed-text hidden".*?>)(.*?)</p>', re.DOTALL)

    # Initialize an index for source matches
    source_index = 0

    # Step 3: Loop through each line in the destination file and replace content line-by-line
    for i, line in enumerate(destination_content):
        if source_index >= len(source_matches):
            break

        # If the line matches the destination pattern, replace its content with the corresponding source content
        if re.search(pattern_destination, line):
            source_inner_content = source_matches[source_index][1].strip()
            print(f"Replacing content in destination line {i + 1} with: {source_inner_content}")

            # Replace the content in the matching line
            destination_content[i] = re.sub(pattern_destination, rf'\1 {source_inner_content}</p>', line, count=1)

            # Move to the next source match
            source_index += 1

    # Step 4: Write the updated content back to the destination file
    with open(destination_file, 'w') as dest:
        dest.write(''.join(destination_content))

    # Debugging: Print the updated destination content
    print("Destination Content After:\n", ''.join(destination_content))

    print("Replacement complete. The destination file has been updated.")

# Example usage:
source_file = r'C:\Rebind AI Work\the work\testing\source.txt'
destination_file = r'C:\Rebind AI Work\the work\testing\destination.txt'

# Call the function to copy and replace the inner text from <p> tags with class or id in the source
copy_and_replace_inner_text(source_file, destination_file)

# Verify the result
with open(destination_file, 'r') as dest:
    print("Updated Destination File Content:")
    print(dest.read())
